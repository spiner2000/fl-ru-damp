<?php

require_once($_SERVER['DOCUMENT_ROOT'] . '/classes/tservices/tservices_categories.php');
require_once($_SERVER['DOCUMENT_ROOT'] . '/classes/tservices/tservices_catalog.php');
require_once($_SERVER['DOCUMENT_ROOT'] . '/classes/country.php');
require_once($_SERVER['DOCUMENT_ROOT'] . '/classes/city.php');
require_once($_SERVER['DOCUMENT_ROOT'] . '/tu/models/TServiceFilterForm.php');

/**
 * Class TServiceFilter
 *
 * Виджет - фильтр типовых услуг
 */
class TServiceFilter extends CWidget {

	/** @var TServiceFilterForm */
	public $filter;

	protected $_category;

	protected $_category_group;

	protected $_city;

	protected $_country;
        
        protected $_order;
        
        /*
         * Константы сортировки
         */
        const ORDER_RELEVANT = 'relevant';
        const ORDER_TAX_SUM = 'tax-sum';
        const ORDER_PRICE_ASC = 'price-asc';
        const ORDER_PRICE_DESC = 'price-desc';
        const ORDER_FEEDBACK = 'feedback';
        const ORDER_SOLD = 'sold';

	public function init()
	{
		parent::init(); // TODO: Change the autogenerated stub
		$this->filter = new TServiceFilterForm;
		$this->setFilterAttributes();
	}

	public function run()
	{
		$this->render('t-service-filter');
	}

	/**
	 * Возвращает диапазоны цен
	 * @return array
	 */
	public function getPriceRanges()
	{
		$prices = tservices_catalog::getPriceRanges();
		foreach($prices as $i => &$price)
		{
			$price['id'] = "price[{$i}]";
			$price['value'] = $i;
			$price['checked'] = !empty($this->filter->prices[$i]);
		}
		return $prices;
	}

	/**
	 * @return array
	 */
	public function getCategory()
	{
		if (is_null($this->_category))
		{
			$this->_category = false;
            $category = ($this->filter->category)?$this->filter->category:$this->filter->category_group;
                        
			if ($category)
			{
				$model = new tservices_categories;
				$this->_category = $model->getCategoryById($category);
			}
		}
		return $this->_category;
	}

	/**
	 * @return array
	 */
	public function getCategoryGroup()
	{
		if (is_null($this->_category_group))
		{
			$this->_category_group = false;
			if ($this->filter->category_group)
			{
				$model = new tservices_categories;
				$this->_category_group = $model->getCategoryById($this->filter->category_group);
			}
		}
		return $this->_category_group;
	}

	/**
	 * Возвращает название текущей категории
	 * @return string
	 */
	public function getCategoryTitle()
	{
		$category = $this->getCategory();
		return $category ? $category['title'] : '';
	}

	/**
	 * Возвращает название текущей группы категорий
	 * @return string
	 */
	public function getCategoryGroupTitle()
	{
		$category_group = $this->getCategoryGroup();
		return $category_group ? $category_group['title'] : '';
	}

	/**
	 * Возвращает совмещённое название текущей категории и группы категорий
	 * @return string
	 */
	public function getCategoryAngGroupTitle($sep = ': ')
	{
            $titles = array($this->getCategoryGroupTitle());
            if ($this->getCategoryGroupTitle() !== $this->getCategoryTitle()) {
                $titles[] = $this->getCategoryTitle();
            }
            return implode($sep, array_filter($titles));
	}

	/**
	 * Возвращает название текущего населённого пункта
	 * @return mixed
	 */
	public function getCityTitle()
	{
		if (is_null($this->_city))
		{
			$this->_city = '';
			if ($this->filter->city)
			{
				$cityModel = new city;
				$this->_city = $cityModel->GetCountryName($this->filter->city) . ": " . $cityModel->getCityName($this->filter->city);
			}
		}
		return $this->_city;
	}

	/**
	 * Возвращает название текущей страны
	 * @return mixed
	 */
	public function getCountryTitle()
	{
		if (is_null($this->_country))
		{
			$this->_country = '';
			if ($this->filter->country)
			{
				$countryModel = new country;
				$this->_country = $countryModel->getCountryName($this->filter->country) . ": Все города";
			}
		}
		return $this->_country;
	}

	/**
	 * Разбирает параметры, переданные через URL или форму фильтра и инициализирует параметры фильтра
	 */
	protected function setFilterAttributes()
	{
		// виджету не запрещено обращаться к URL запроса

		$attributes = $def_attributes = array(
			'category' => '',
			'category_group' => '',
			'city' => '',
			'country' => '',
			'prices' => array(),
			'keywords' => '',
            'order' => self::ORDER_RELEVANT,
            'price_max' => 0
		);

		if ($category_link = __paramInit('string','category',NULL,0)) // параметр "категория" из URL '/tu/<category>/'
		{
			$categoryModel = new tservices_categories;
			$category = $categoryModel->getCategoryByLink($category_link);
			if (!$category) 
			{
                header('Location: /404.php');
				exit;
			}
			if ($category['parent_id'])
			{
				$attributes['category'] = $category['id'];
				$attributes['category_group'] = $category['parent_id'];
			} 
			else
			{
				$attributes['category'] = null;
				$attributes['category_group'] = $category['id'];
			}
		}
                
		if ($city_id = __paramInit('int','city',NULL,0))
		{
			// TODO ? 404 Not Found
			$attributes['city'] = $city_id;
		}
                
		if ($country_id = __paramInit('int','country',NULL,0))
		{
			// TODO ? 404 Not Found
			$attributes['country'] = $country_id;
		}
                
		if ($prices = __paramInit('array_int','prices',NULL,array()))
		{
			// TODO ? 404 Not Found
			$attributes['prices'] = $prices;
		}
                
                if($price_max = __paramInit('int','price_max',NULL,0))
		{
					$_SESSION['new_project_cost'] = abs($price_max);
                        $attributes['price_max'] = abs($price_max);
                }
                
                if ($keywords = __paramInit('string','keywords',NULL,''))
		{
                        $keywords = stripslashes($keywords);
			$keywords = iconv('UTF-8', 'CP1251', urldecode(strip_tags($keywords)));
			$_SESSION['new_project_name'] = $keywords;
			// TODO ? 500 Internal Server Error
			$attributes['keywords'] = $keywords;
		}
                
                if ($order = __paramInit('string','order',NULL,''))
		{
			// TODO ? 404 Not Found
                    $attributes['order'] = in_array($order, $this->getAllowedOrders()) ? $order : self::ORDER_RELEVANT;
		}
                
		$this->filter->attributes($attributes);

		// override URL parameters
		// если данные прислали методом POST, то они имеют выше приоритет на параметрами GET
		if (''!=__paramInit('string', null, 'action')) // что-то прислали "постом"
		{
			$attributes = $def_attributes;
/*
$_POST = array
(
    [category_id_columns] => Array
        (
            [1] => 0
            [0] => 1
        )

    [category_id_column_id] => 0
    [category_id_db_id] => 1
    [category_id] => Менеджмент
    [price] => Array
        (
            [3] => 3
            [5] => 5
        )

    [location_id_columns] => Array
        (
            [1] => 0
            [0] => 1
        )

    [location_id_column_id] => 0
    [location_id_db_id] => 1
    [location_id] => Россия

    [keywords] => 'альбом, наклейки'
)
 */
			/*
			 * Логично юзать эти поля еслибы контрол работал корректно :)
			if (isset($_POST['category_id_columns']))
			{
				$_category_id_columns = (array)$_POST['category_id_columns'];
				if (isset($_category_id_columns[1])) {
					$attributes['category'] = +$_category_id_columns[1];
				}
				if(isset($_category_id_columns[0]))
				{
					$attributes['category_group'] = +$_category_id_columns[0];
				}
			}
			 */

			if (isset($_POST['category_id_db_id']))
			{
				$attributes['category'] = +$_POST['category_id_db_id'];
			}

			if (isset($_POST['location_id_columns']))
			{
				$_location_id_columns = (array)$_POST['location_id_columns'];
				if (isset($_location_id_columns[1])) {
					$attributes['city'] = +$_location_id_columns[1];
				}
				if(isset($_location_id_columns[0]))
				{
					$attributes['country'] = +$_location_id_columns[0];
				}
			}

			/*
			 * Тут тоже самое но сложность в том чтобы понять какое ID города или страны?
			 *
			if (isset($_POST['location_id_db_id']))
			{
				$attributes['city'] = +$_POST['location_id_db_id'];
			}
			*/

			if (isset($_POST['price']))
			{
				$_prices = (array)$_POST['price'];
				foreach($_prices as $_price_id => $_price_value)
				{
					$attributes['prices'][+$_price_id] = true;
				}
			}
                        
                        $price_max = abs(__paramInit('int',NULL,'price_max',0));
			$_SESSION['new_project_cost'] = $price_max;
                        $attributes['price_max'] = $price_max;
                        
			if (isset($_POST['keywords']))
			{
				$attributes['keywords'] = strip_tags($_POST['keywords']);
				$price_max = strip_tags($_POST['keywords']);
			}
                        
                        if (isset($_POST['order']))
			{
				$attributes['order'] = in_array($_POST['order'], $this->getAllowedOrders()) ? strip_tags($_POST['order']) : self::ORDER_RELEVANT;
			}

			$this->filter->attributes($attributes);
			$url = $this->getUserFriendlyUrl();
			header('HTTP/1.0 205 Reset Content');
			header('Location: ' . $url);
			exit;
		}
	}

	public function getUserFriendlyUrl($use_category = true)
	{
		$attributes = $this->filter->attributes();
        $url_template = '';
        
        if ($use_category) {
            $url_template = '/tu/';
            if ($category = $this->getCategory())
            {
                $url_template .= $category['link'] . '/';
            } 
            /*
            elseif ($category_group = $this->getCategoryGroup())
            {
                $url_template .= $category_group['link'] . '/';
            }*/
        }
         
        unset($attributes['category'], $attributes['category_group']);
        if ($attributes['order'] == self::ORDER_RELEVANT) //Сортировка по релевантности выбрана по умолчанию
        {
            unset($attributes['order']);
        }
                
		$url_template_params = array();
		foreach($attributes as $key => $values)
		{
			if (is_array($values))
			{
				if ('prices' == $key) // опция "Все цены" уже и так считается выбранной
				{
					unset($values[tservices_catalog::ANY_PRICE_RANGE]);
				}
				foreach($values as $i => $value)
				{
					$value = urlencode(stripslashes(iconv("CP1251", "UTF-8", $value)));
					$url_template_params[] = "{$key}[{$i}]={$value}";
				}
			} elseif (!empty($values))
			{
                $values = urlencode(stripslashes(iconv("CP1251", "UTF-8", $values)));
				$url_template_params[] = "{$key}={$values}";
			}
		}
		return $url_template . (!empty($url_template_params) ? '?' . implode('&', $url_template_params) : '');
	}

        /**
         * Возвращает список допустимых сортировок
         * 
         * @param bool $asValues Только ключи или со значениями. По умолчанию - ключи
         */
        public function getAllowedOrders($asValues = false) {
            $noResponse = !$this->filter->keywords && !$this->filter->price_max;
            $orders = array(
                self::ORDER_RELEVANT => $noResponse ? 'последней покупке' : 'соответствию запросу',
                self::ORDER_TAX_SUM => 'сумме продаж',
                self::ORDER_PRICE_ASC => 'возрастанию цены',
                self::ORDER_PRICE_DESC => 'убыванию цены',
                self::ORDER_FEEDBACK => 'отзывам',
                self::ORDER_SOLD => 'количеству покупок'
            );
            return $asValues ? $orders : array_keys($orders);
        }
        
}
